#!/usr/bin/env node

const fs = require('fs')
const { GITKEEP_FILE, UNRELEASED_DIR, RELEASE_NOTES_DIR, PLATFORM_ANDROID, PLATFORM_IOS } = require('./constants')
const { program } = require('commander')
const yaml = require('js-yaml')

const MAX_RELEASE_NOTES_LENGTH = 500

const DEFAULT_LANGUAGE = 'de'
const DEFAULT_NOTES = 'Wir haben hinter den Kulissen hart gearbeitet, um sicherzustellen, dass alles so funktioniert, wie es soll. Wenn Sie bemerken, dass etwas nicht funktioniert, lassen Sie es uns wissen!\n'

program
  .option('--ios', 'include release notes for ios')
  .option('--android', 'include release notes for android')
  .option('--production', 'whether to hide extra information, e.g. issue keys, hidden notes and platforms and prepare the notes for a store. may not be used with multiple platforms.')
  .option('--destination <destination>', 'if specified the parsed notes are saved to the directory')
  .requiredOption('--source <source>', 'the directory of the release notes to parse', `${RELEASE_NOTES_DIR}/${UNRELEASED_DIR}`)

const formatNotes = ({ notes, production, platformName }) => {
  const defaultNote = production ? DEFAULT_NOTES : ''
  if (notes.length === 0) {
    return defaultNote
  }

  const formattedNotes = notes
    .map(note => {
      const localizedNote = note[DEFAULT_LANGUAGE]
      // Double quotes make mattermost status alerts fail
      const escapedNote = localizedNote.replace(/"/g, '\'')
      return production ? `* ${escapedNote}` : `* [ ${note.issue_key} ] ${escapedNote}`
    })
    .reduce((text, note) => {
      if (production && text.length + note.length > MAX_RELEASE_NOTES_LENGTH) {
        return text
      } else if (text.length === 0) {
        return note
      }
      return `${text}\n${note}`
    }, '')

  const notesWithDefault = production && defaultNote.length + formattedNotes.length > MAX_RELEASE_NOTES_LENGTH
    ? formattedNotes
    : `${defaultNote}${formattedNotes}`

  return platformName ? `\n${platformName}:\n${notesWithDefault}` : `${notesWithDefault}`
}

const isNoteRelevant = ({ note, platforms }) => platforms.some(platform => note.platforms.includes(platform))
const isNoteCommon = ({ note, platforms }) => platforms.every(platform => note.platforms.includes(platform))

const parseReleaseNotes = ({ source, android, ios, production }) => {
  const platforms = []
  if (android) {
    platforms.push(PLATFORM_ANDROID)
  }
  if (ios) {
    platforms.push(PLATFORM_IOS)
  }

  if (platforms.length === 0) {
    throw new Error('No platforms selected! Use --ios, --android flags.')
  } else if (platforms.length > 1 && production) { // e.g. play store release notes should not contain ios release infos
    throw new Error('Usage of multiple platforms in production mode is not supported.')
  }

  if (!fs.existsSync(source)) {
    console.warn('Source not found. Nothing to do...')
    return DEFAULT_NOTES
  }

  const fileNames = fs.readdirSync(source)

  // Load all notes not belonging to a release
  const relevantNotes = fileNames
    .filter(fileName => fileName !== GITKEEP_FILE)
    .map(fileName => yaml.safeLoad(fs.readFileSync(`${source}/${fileName}`)))
    .filter(note => isNoteRelevant({ note, platforms }))

  // If the production flag is set, hide information that is irrelevant for users
  if (production) {
    const productionNotes = relevantNotes.filter(note => note.show_in_stores)
    return formatNotes({ notes: productionNotes, production })
  }

  // Group notes by platform
  const notesMap = relevantNotes.reduce((notesMap, note) => {
    if (isNoteCommon({ note, platforms })) {
      notesMap.common.push(note)
    } else if (isNoteRelevant({ note, platforms: [PLATFORM_ANDROID] })) {
      notesMap.android.push(note)
    } else if (isNoteRelevant({ note, platforms: [PLATFORM_IOS] })) {
      notesMap.ios.push(note)
    }
    return notesMap
  }, { common: [], android: [], ios: [] })

  const commonNotes = formatNotes({ notes: notesMap.common, production })
  const androidNotes = formatNotes({ notes: notesMap.android, production, platformName: PLATFORM_ANDROID })
  const iosNotes = formatNotes({ notes: notesMap.ios, production, platformName: PLATFORM_IOS })

  const releaseNotes = `${commonNotes}${androidNotes}${iosNotes}`
  return `Release Notes:\n${releaseNotes || 'No release notes found. Looks like nothing happened for a while.'}`
}

program
  .command('parse')
  .description('parse the release notes and outputs the release notes as JSON string and writes them to the specified file')
  .action(() => {
    try {
      const notes = parseReleaseNotes({ ...program })

      if (program.destination) {
        fs.writeFileSync(program.destination, notes)
      }

      // Log to enable bash piping
      console.log(JSON.stringify(notes))
    } catch (e) {
      console.error(e)
      process.exit(1)
    }
  })

program.parse(process.argv)
